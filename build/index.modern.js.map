{"version":3,"sources":["webpack://SimpleKeyboard/webpack/universalModuleDefinition","webpack://SimpleKeyboard/webpack/bootstrap","webpack://SimpleKeyboard/webpack/runtime/define property getters","webpack://SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://SimpleKeyboard/webpack/runtime/make namespace object","webpack://SimpleKeyboard/./src/lib/services/Utilities.ts","webpack://SimpleKeyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://SimpleKeyboard/./src/lib/components/CandidateBox.ts","webpack://SimpleKeyboard/./src/lib/components/Keyboard.ts","webpack://SimpleKeyboard/./src/lib/services/KeyboardLayout.ts","webpack://SimpleKeyboard/./src/lib/index.modern.ts"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utilities","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","button","length","bindMethods","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","debug","console","log","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","nextTwoChars","emojiMatched","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","Array","Math","ceil","map","_","i","myClass","getOwnPropertyNames","myMethod","bind","PhysicalKeyboard","event","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","click","handleButtonClicked","removeAttribute","onpointerup","keyId","code","keyCodeToKey","keyCode","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","e","destroy","document","createElement","className","candidateListULElement","forEach","candidateListItem","candidateListLIElement","getMouseEvent","mouseEvent","MouseEvent","textContent","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","isNextBtnElementActive","nextBtnElement","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","warn","Error","caretPositionEnd","name","initCallback","modules","baseDOMClasses","keyboardClasses","filter","DOMClass","handleParams","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","matchAll","candidateKey","sort","a","b","show","normalizedCandidate","normalize","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onChange","onChangeAll","getAllInputs","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","onKeyPress","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","syncInstanceInputs","target","getInputCandidates","showCandidatesBox","isMouseHold","preventDefault","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","holdTimeout","setMouseHold","disableButtonHold","setTimeout","getMouseHold","handleButtonHold","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","buttonElement","onKeyReleased","replaceInput","skipSync","rtl","inputWithoutRTLControl","changedOptions","onSetOptions","newOptions","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","classNameItem","buttonTheme","classNameFound","buttonThemeArray","push","class","isArray","index","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","handleSelect","handleSelectionChange","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","targetTagName","tagName","isKeyboard","path","some","hasAttribute","type","disableCaretPositioning","selectionStart","selectionEnd","fn","removeEventListener","ontouchend","ontouchcancel","onmouseup","onpointercancel","ontouchstart","onmousedown","resetRows","innerHTML","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","useTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","KeyboardModule","keyboardModule","init","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","layoutClass","layout","default","shift","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","row","rIndex","rowArray","bIndex","buttonHasContainerStart","indexOf","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","buttonUID","buttonSpanDOM","parseRowDOMContainers","undefined","handleKeyboardContainerMouseDown"],"mappings":"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","file":"index.modern.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from \"./../interfaces\";\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\n\n/**\n * Utility Service\n */\nclass Utilities {\n  getOptions: () => KeyboardOptions;\n  getCaretPosition: () => number | null;\n  getCaretPositionEnd: () => number | null;\n  dispatch: any;\n  maxLengthReached!: boolean;\n\n  /**\n   * Creates an instance of the Utility service\n   */\n  constructor({\n    getOptions,\n    getCaretPosition,\n    getCaretPositionEnd,\n    dispatch,\n  }: UtilitiesParams) {\n    this.getOptions = getOptions;\n    this.getCaretPosition = getCaretPosition;\n    this.getCaretPositionEnd = getCaretPositionEnd;\n    this.dispatch = dispatch;\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(Utilities, this);\n  }\n\n  /**\n   * Retrieve button type\n   *\n   * @param  {string} button The button's layout name\n   * @return {string} The button type\n   */\n  getButtonType(button: string): string {\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\n      ? \"functionBtn\"\n      : \"standardBtn\";\n  }\n\n  /**\n   * Adds default classes to a given button\n   *\n   * @param  {string} button The button's layout name\n   * @return {string} The classes to be added to the button\n   */\n  getButtonClass(button: string): string {\n    const buttonTypeClass = this.getButtonType(button);\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\n    let buttonNormalized = \"\";\n\n    if (buttonTypeClass !== \"standardBtn\")\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\n\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\n  }\n\n  /**\n   * Default button display labels\n   */\n  getDefaultDiplay() {\n    return {\n      \"{bksp}\": \"backspace\",\n      \"{backspace}\": \"backspace\",\n      \"{enter}\": \"< enter\",\n      \"{shift}\": \"shift\",\n      \"{shiftleft}\": \"shift\",\n      \"{shiftright}\": \"shift\",\n      \"{alt}\": \"alt\",\n      \"{s}\": \"shift\",\n      \"{tab}\": \"tab\",\n      \"{lock}\": \"caps\",\n      \"{capslock}\": \"caps\",\n      \"{accept}\": \"Submit\",\n      \"{space}\": \" \",\n      \"{//}\": \" \",\n      \"{esc}\": \"esc\",\n      \"{escape}\": \"esc\",\n      \"{f1}\": \"f1\",\n      \"{f2}\": \"f2\",\n      \"{f3}\": \"f3\",\n      \"{f4}\": \"f4\",\n      \"{f5}\": \"f5\",\n      \"{f6}\": \"f6\",\n      \"{f7}\": \"f7\",\n      \"{f8}\": \"f8\",\n      \"{f9}\": \"f9\",\n      \"{f10}\": \"f10\",\n      \"{f11}\": \"f11\",\n      \"{f12}\": \"f12\",\n      \"{numpaddivide}\": \"/\",\n      \"{numlock}\": \"lock\",\n      \"{arrowup}\": \"↑\",\n      \"{arrowleft}\": \"←\",\n      \"{arrowdown}\": \"↓\",\n      \"{arrowright}\": \"→\",\n      \"{prtscr}\": \"print\",\n      \"{scrolllock}\": \"scroll\",\n      \"{pause}\": \"pause\",\n      \"{insert}\": \"ins\",\n      \"{home}\": \"home\",\n      \"{pageup}\": \"up\",\n      \"{delete}\": \"del\",\n      \"{forwarddelete}\": \"del\",\n      \"{end}\": \"end\",\n      \"{pagedown}\": \"down\",\n      \"{numpadmultiply}\": \"*\",\n      \"{numpadsubtract}\": \"-\",\n      \"{numpadadd}\": \"+\",\n      \"{numpadenter}\": \"enter\",\n      \"{period}\": \".\",\n      \"{numpaddecimal}\": \".\",\n      \"{numpad0}\": \"0\",\n      \"{numpad1}\": \"1\",\n      \"{numpad2}\": \"2\",\n      \"{numpad3}\": \"3\",\n      \"{numpad4}\": \"4\",\n      \"{numpad5}\": \"5\",\n      \"{numpad6}\": \"6\",\n      \"{numpad7}\": \"7\",\n      \"{numpad8}\": \"8\",\n      \"{numpad9}\": \"9\",\n    };\n  }\n  /**\n   * Returns the display (label) name for a given button\n   *\n   * @param  {string} button The button's layout name\n   * @param  {object} display The provided display option\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\n   */\n  getButtonDisplayName(\n    button: string,\n    display: KeyboardOptions[\"display\"],\n    mergeDisplay: boolean\n  ) {\n    if (mergeDisplay) {\n      display = Object.assign({}, this.getDefaultDiplay(), display);\n    } else {\n      display = display || this.getDefaultDiplay();\n    }\n\n    return display[button] || button;\n  }\n\n  /**\n   * Returns the updated input resulting from clicking a given button\n   *\n   * @param  {string} button The button's layout name\n   * @param  {string} input The input string\n   * @param  {number} caretPos The cursor's current position\n   * @param  {number} caretPosEnd The cursor's current end position\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  getUpdatedInput(\n    button: string,\n    input: string,\n    caretPos: number,\n    caretPosEnd = caretPos,\n    moveCaret = false\n  ) {\n    const options = this.getOptions();\n    const commonParams: [number, number, boolean] = [\n      caretPos,\n      caretPosEnd,\n      moveCaret,\n    ];\n\n    let output = input;\n\n    if (\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\n      output.length > 0\n    ) {\n      output = this.removeAt(output, ...commonParams);\n    } else if (\n      (button === \"{delete}\" || button === \"{forwarddelete}\") &&\n      output.length > 0\n    ) {\n      output = this.removeForwardsAt(output, ...commonParams);\n    } else if (button === \"{space}\")\n      output = this.addStringAt(output, \" \", ...commonParams);\n    else if (\n      button === \"{tab}\" &&\n      !(\n        typeof options.tabCharOnTab === \"boolean\" &&\n        options.tabCharOnTab === false\n      )\n    ) {\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\n    } else if (\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\n      options.newLineOnEnter\n    )\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\n    else if (\n      button.includes(\"numpad\") &&\n      Number.isInteger(Number(button[button.length - 2]))\n    ) {\n      output = this.addStringAt(\n        output,\n        button[button.length - 2],\n        ...commonParams\n      );\n    } else if (button === \"{numpaddivide}\")\n      output = this.addStringAt(output, \"/\", ...commonParams);\n    else if (button === \"{numpadmultiply}\")\n      output = this.addStringAt(output, \"*\", ...commonParams);\n    else if (button === \"{numpadsubtract}\")\n      output = this.addStringAt(output, \"-\", ...commonParams);\n    else if (button === \"{numpadadd}\")\n      output = this.addStringAt(output, \"+\", ...commonParams);\n    else if (button === \"{numpaddecimal}\")\n      output = this.addStringAt(output, \".\", ...commonParams);\n    else if (button === \"{\" || button === \"}\")\n      output = this.addStringAt(output, button, ...commonParams);\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\n      output = this.addStringAt(output, button, ...commonParams);\n\n    return output;\n  }\n\n  /**\n   * Moves the cursor position by a given amount\n   *\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPos(length: number, minus = false) {\n    const newCaretPos = this.updateCaretPosAction(length, minus);\n\n    this.dispatch((instance: any) => {\n      instance.setCaretPosition(newCaretPos);\n    });\n  }\n\n  /**\n   * Action method of updateCaretPos\n   *\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPosAction(length: number, minus = false) {\n    const options = this.getOptions();\n    let caretPosition = this.getCaretPosition();\n\n    if (caretPosition != null) {\n      if (minus) {\n        if (caretPosition > 0) caretPosition = caretPosition - length;\n      } else {\n        caretPosition = caretPosition + length;\n      }\n    }\n\n    if (options.debug) {\n      console.log(\"Caret at:\", caretPosition);\n    }\n\n    return caretPosition;\n  }\n\n  /**\n   * Adds a string to the input at a given position\n   *\n   * @param  {string} source The source input\n   * @param  {string} str The string to add\n   * @param  {number} position The (cursor) position where the string should be added\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  addStringAt(\n    source: string,\n    str: string,\n    position = source.length,\n    positionEnd = source.length,\n    moveCaret = false\n  ) {\n    let output;\n\n    if (!position && position !== 0) {\n      output = source + str;\n    } else {\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\n        \"\"\n      );\n\n      /**\n       * Avoid caret position change when maxLength is set\n       */\n      if (!this.isMaxLengthReached()) {\n        if (moveCaret) this.updateCaretPos(str.length);\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Check whether the button is a standard button\n   */\n  isStandardButton = (button: string) =>\n    button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\n\n  /**\n   * Removes an amount of characters before a given position\n   *\n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  removeAt(\n    source: string,\n    position = source.length,\n    positionEnd = source.length,\n    moveCaret = false\n  ) {\n    if (position === 0 && positionEnd === 0) {\n      return source;\n    }\n\n    let output;\n\n    if (position === positionEnd) {\n      let prevTwoChars;\n      let emojiMatched;\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n      /**\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\n       */\n      if (position && position >= 0) {\n        prevTwoChars = source.substring(position - 2, position);\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n        if (emojiMatched) {\n          output = source.substr(0, position - 2) + source.substr(position);\n          if (moveCaret) this.updateCaretPos(2, true);\n        } else {\n          output = source.substr(0, position - 1) + source.substr(position);\n          if (moveCaret) this.updateCaretPos(1, true);\n        }\n      } else {\n        prevTwoChars = source.slice(-2);\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n        if (emojiMatched) {\n          output = source.slice(0, -2);\n          if (moveCaret) this.updateCaretPos(2, true);\n        } else {\n          output = source.slice(0, -1);\n          if (moveCaret) this.updateCaretPos(1, true);\n        }\n      }\n    } else {\n      output = source.slice(0, position) + source.slice(positionEnd);\n      if (moveCaret) {\n        this.dispatch((instance: any) => {\n          instance.setCaretPosition(position);\n        });\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Removes an amount of characters after a given position\n   *\n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   */\n  removeForwardsAt(\n    source: string,\n    position: number = source.length,\n    positionEnd: number = source.length,\n    moveCaret = false\n  ) {\n    if (!source?.length || position === null) {\n      return source;\n    }\n\n    let output;\n\n    if (position === positionEnd) {\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n      /**\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\n       */\n      const nextTwoChars = source.substring(position, position + 2);\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\n\n      if (emojiMatched) {\n        output = source.substr(0, position) + source.substr(position + 2);\n      } else {\n        output = source.substr(0, position) + source.substr(position + 1);\n      }\n    } else {\n      output = source.slice(0, position) + source.slice(positionEnd);\n      if (moveCaret) {\n        this.dispatch((instance: any) => {\n          instance.setCaretPosition(position);\n        });\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\n   *\n   * @param  {object} inputObj\n   * @param  {string} updatedInput\n   */\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\n    const options = this.getOptions();\n    const maxLength = options.maxLength;\n    const currentInput = inputObj[options.inputName || \"default\"];\n    const condition = updatedInput.length - 1 >= maxLength;\n\n    if (\n      /**\n       * If pressing this button won't add more characters\n       * We exit out of this limiter function\n       */\n      updatedInput.length <= currentInput.length\n    ) {\n      return false;\n    }\n\n    if (Number.isInteger(maxLength)) {\n      if (options.debug) {\n        console.log(\"maxLength (num) reached:\", condition);\n      }\n\n      if (condition) {\n        /**\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\n         */\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n\n    if (typeof maxLength === \"object\") {\n      const condition =\n        updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\n\n      if (options.debug) {\n        console.log(\"maxLength (obj) reached:\", condition);\n      }\n\n      if (condition) {\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Gets the current value of maxLengthReached\n   */\n  isMaxLengthReached() {\n    return Boolean(this.maxLengthReached);\n  }\n\n  /**\n   * Determines whether a touch device is being used\n   */\n  isTouchDevice() {\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\n  }\n\n  /**\n   * Determines whether pointer events are supported\n   */\n  pointerEventsSupported() {\n    return !!window.PointerEvent;\n  }\n\n  /**\n   * Bind all methods in a given class\n   */\n\n  static bindMethods(myClass: any, instance: any) {\n    // eslint-disable-next-line no-unused-vars\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\n      const excludeMethod =\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\n      if (!excludeMethod) {\n        instance[myMethod] = instance[myMethod].bind(instance);\n      }\n    }\n  }\n\n  /**\n   * Transforms an arbitrary string to camelCase\n   *\n   * @param  {string} str The string to transform.\n   */\n  camelCase(str: string): string {\n    if (!str) return \"\";\n\n    return str\n      .toLowerCase()\n      .trim()\n      .split(/[.\\-_\\s]/g)\n      .reduce((str, word) =>\n        word.length ? str + word[0].toUpperCase() + word.slice(1) : str\n      );\n  }\n\n  /**\n   * Split array into chunks\n   */\n  chunkArray<T>(arr: T[], size: number): T[][] {\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) =>\n      arr.slice(size * i, size + size * i)\n    );\n  }\n\n  /**\n   * Reusable empty function\n   */\n  static noop = () => {};\n}\n\nexport default Utilities;\n","import { KeyboardOptions, PhysicalKeyboardParams } from \"../interfaces\";\nimport Utilities from \"../services/Utilities\";\n\n/**\n * Physical Keyboard Service\n */\nclass PhysicalKeyboard {\n  getOptions: () => KeyboardOptions;\n  dispatch: any;\n\n  /**\n   * Creates an instance of the PhysicalKeyboard service\n   */\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.dispatch = dispatch;\n    this.getOptions = getOptions;\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(PhysicalKeyboard, this);\n  }\n\n  handleHighlightKeyDown(event: KeyboardEvent) {\n    const options = this.getOptions();\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(event);\n\n    this.dispatch((instance: any) => {\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\n      const functionButtonPressed = instance.getButtonElement(\n        `{${buttonPressed}}`\n      );\n      let buttonDOM;\n      let buttonName;\n\n      if (standardButtonPressed) {\n        buttonDOM = standardButtonPressed;\n        buttonName = buttonPressed;\n      } else if (functionButtonPressed) {\n        buttonDOM = functionButtonPressed;\n        buttonName = `{${buttonPressed}}`;\n      } else {\n        return;\n      }\n\n      if (buttonDOM) {\n        buttonDOM.style.background =\n          options.physicalKeyboardHighlightBgColor || \"#dadce4\";\n        buttonDOM.style.color =\n          options.physicalKeyboardHighlightTextColor || \"black\";\n\n        if (options.physicalKeyboardHighlightPress) {\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n            buttonDOM.onpointerdown();\n          } else if (options.physicalKeyboardHighlightPressUseClick) {\n            buttonDOM.click();\n          } else {\n            instance.handleButtonClicked(buttonName, event);\n          }\n        }\n      }\n    });\n  }\n\n  handleHighlightKeyUp(event: KeyboardEvent) {\n    const options = this.getOptions();\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(event);\n\n    this.dispatch((instance: any) => {\n      const buttonDOM =\n        instance.getButtonElement(buttonPressed) ||\n        instance.getButtonElement(`{${buttonPressed}}`);\n\n      if (buttonDOM && buttonDOM.removeAttribute) {\n        buttonDOM.removeAttribute(\"style\");\n        if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n          buttonDOM.onpointerup();\n        }\n      }\n    });\n  }\n\n  /**\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\n   * @param  {object} event The KeyboardEvent\n   */\n  getSimpleKeyboardLayoutKey(event: KeyboardEvent) {\n    let output = \"\";\n    const keyId = event.code || event.key || this.keyCodeToKey(event?.keyCode);\n\n    if (\n      keyId?.includes(\"Numpad\") ||\n      keyId?.includes(\"Shift\") ||\n      keyId?.includes(\"Space\") ||\n      keyId?.includes(\"Backspace\") ||\n      keyId?.includes(\"Control\") ||\n      keyId?.includes(\"Alt\") ||\n      keyId?.includes(\"Meta\")\n    ) {\n      output = event.code || \"\";\n    } else {\n      output = event.key || this.keyCodeToKey(event?.keyCode) || \"\";\n    }\n\n    return output.length > 1 ? output?.toLowerCase() : output;\n  }\n\n  /**\n   * Retrieve key from keyCode\n   */\n  keyCodeToKey(keyCode: number) {\n    return {\n      8: \"Backspace\",\n      9: \"Tab\",\n      13: \"Enter\",\n      16: \"Shift\",\n      17: \"Ctrl\",\n      18: \"Alt\",\n      19: \"Pause\",\n      20: \"CapsLock\",\n      27: \"Esc\",\n      32: \"Space\",\n      33: \"PageUp\",\n      34: \"PageDown\",\n      35: \"End\",\n      36: \"Home\",\n      37: \"ArrowLeft\",\n      38: \"ArrowUp\",\n      39: \"ArrowRight\",\n      40: \"ArrowDown\",\n      45: \"Insert\",\n      46: \"Delete\",\n      48: \"0\",\n      49: \"1\",\n      50: \"2\",\n      51: \"3\",\n      52: \"4\",\n      53: \"5\",\n      54: \"6\",\n      55: \"7\",\n      56: \"8\",\n      57: \"9\",\n      65: \"A\",\n      66: \"B\",\n      67: \"C\",\n      68: \"D\",\n      69: \"E\",\n      70: \"F\",\n      71: \"G\",\n      72: \"H\",\n      73: \"I\",\n      74: \"J\",\n      75: \"K\",\n      76: \"L\",\n      77: \"M\",\n      78: \"N\",\n      79: \"O\",\n      80: \"P\",\n      81: \"Q\",\n      82: \"R\",\n      83: \"S\",\n      84: \"T\",\n      85: \"U\",\n      86: \"V\",\n      87: \"W\",\n      88: \"X\",\n      89: \"Y\",\n      90: \"Z\",\n      91: \"Meta\",\n      96: \"Numpad0\",\n      97: \"Numpad1\",\n      98: \"Numpad2\",\n      99: \"Numpad3\",\n      100: \"Numpad4\",\n      101: \"Numpad5\",\n      102: \"Numpad6\",\n      103: \"Numpad7\",\n      104: \"Numpad8\",\n      105: \"Numpad9\",\n      106: \"NumpadMultiply\",\n      107: \"NumpadAdd\",\n      109: \"NumpadSubtract\",\n      110: \"NumpadDecimal\",\n      111: \"NumpadDivide\",\n      112: \"F1\",\n      113: \"F2\",\n      114: \"F3\",\n      115: \"F4\",\n      116: \"F5\",\n      117: \"F6\",\n      118: \"F7\",\n      119: \"F8\",\n      120: \"F9\",\n      121: \"F10\",\n      122: \"F11\",\n      123: \"F12\",\n      144: \"NumLock\",\n      145: \"ScrollLock\",\n      186: \";\",\n      187: \"=\",\n      188: \",\",\n      189: \"-\",\n      190: \".\",\n      191: \"/\",\n      192: \"`\",\n      219: \"[\",\n      220: \"\\\\\",\n      221: \"]\",\n      222: \"'\",\n    }[keyCode];\n  }\n}\n\nexport default PhysicalKeyboard;\n","import \"./css/CandidateBox.css\";\n\nimport Utilities from \"../services/Utilities\";\nimport {\n  CandidateBoxParams,\n  CandidateBoxRenderParams,\n  CandidateBoxShowParams,\n} from \"./../interfaces\";\n\nclass CandidateBox {\n  utilities: Utilities;\n  candidateBoxElement!: HTMLDivElement;\n  pageIndex = 0;\n  pageSize;\n\n  constructor({ utilities }: CandidateBoxParams) {\n    this.utilities = utilities;\n    Utilities.bindMethods(CandidateBox, this);\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\n  }\n\n  destroy() {\n    if (this.candidateBoxElement) {\n      this.candidateBoxElement.remove();\n      this.pageIndex = 0;\n    }\n  }\n\n  show({\n    candidateValue,\n    targetElement,\n    onSelect,\n  }: CandidateBoxShowParams): void {\n    if (!candidateValue || !candidateValue.length) {\n      return;\n    }\n\n    const candidateListPages = this.utilities.chunkArray(\n      candidateValue.split(\" \"),\n      this.pageSize\n    );\n\n    this.renderPage({\n      candidateListPages,\n      targetElement,\n      pageIndex: this.pageIndex,\n      nbPages: candidateListPages.length,\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\n        onSelect(selectedCandidate, e);\n        this.destroy();\n      },\n    });\n  }\n\n  renderPage({\n    candidateListPages,\n    targetElement,\n    pageIndex,\n    nbPages,\n    onItemSelected,\n  }: CandidateBoxRenderParams) {\n    // Remove current candidate box, if any\n    this.candidateBoxElement?.remove();\n\n    // Create candidate box element\n    this.candidateBoxElement = document.createElement(\"div\");\n    this.candidateBoxElement.className = \"hg-candidate-box\";\n\n    // Candidate box list\n    const candidateListULElement = document.createElement(\"ul\");\n    candidateListULElement.className = \"hg-candidate-box-list\";\n\n    // Create Candidate box list items\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\n      const candidateListLIElement = document.createElement(\"li\");\n      const getMouseEvent = () => {\n        const mouseEvent = new MouseEvent(\"click\");\n        Object.defineProperty(mouseEvent, \"target\", {\n          value: candidateListLIElement,\n        });\n        return mouseEvent;\n      };\n\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\n      candidateListLIElement.textContent = candidateListItem;\n      candidateListLIElement.onclick = (e = getMouseEvent()) =>\n        onItemSelected(candidateListItem, e);\n\n      // Append list item to ul\n      candidateListULElement.appendChild(candidateListLIElement);\n    });\n\n    // Add previous button\n    const isPrevBtnElementActive = pageIndex > 0;\n    const prevBtnElement = document.createElement(\"div\");\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\n    isPrevBtnElementActive &&\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\n    prevBtnElement.onclick = () => {\n      if (!isPrevBtnElementActive) return;\n      this.renderPage({\n        candidateListPages,\n        targetElement,\n        pageIndex: pageIndex - 1,\n        nbPages,\n        onItemSelected,\n      });\n    };\n    this.candidateBoxElement.appendChild(prevBtnElement);\n\n    // Add elements to container\n    this.candidateBoxElement.appendChild(candidateListULElement);\n\n    // Add next button\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\n    const nextBtnElement = document.createElement(\"div\");\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\n    isNextBtnElementActive &&\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\n\n    nextBtnElement.onclick = () => {\n      if (!isNextBtnElementActive) return;\n      this.renderPage({\n        candidateListPages,\n        targetElement,\n        pageIndex: pageIndex + 1,\n        nbPages,\n        onItemSelected,\n      });\n    };\n    this.candidateBoxElement.appendChild(nextBtnElement);\n\n    // Append candidate box to target element\n    targetElement.prepend(this.candidateBoxElement);\n  }\n}\n\nexport default CandidateBox;\n","import \"./css/Keyboard.css\";\n\n// Services\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\nimport Utilities from \"../services/Utilities\";\nimport {\n  KeyboardOptions,\n  KeyboardInput,\n  KeyboardButtonElements,\n  KeyboardHandlerEvent,\n  KeyboardElement,\n} from \"../interfaces\";\nimport CandidateBox from \"./CandidateBox\";\n\n/**\n * Root class for simple-keyboard.\n * This class:\n * - Parses the options\n * - Renders the rows and buttons\n * - Handles button functionality\n */\nclass SimpleKeyboard {\n  input!: KeyboardInput;\n  options!: KeyboardOptions;\n  utilities: any;\n  caretPosition!: number | null;\n  caretPositionEnd!: number | null;\n  keyboardDOM!: KeyboardElement;\n  keyboardPluginClasses!: string;\n  keyboardDOMClass!: string;\n  buttonElements!: KeyboardButtonElements;\n  currentInstanceName!: string;\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\n  keyboardInstanceNames!: string[];\n  isFirstKeyboardInstance!: boolean;\n  physicalKeyboard!: PhysicalKeyboard;\n  modules!: { [key: string]: any };\n  activeButtonClass!: string;\n  holdInteractionTimeout!: number;\n  holdTimeout!: number;\n  isMouseHold!: boolean;\n  initialized!: boolean;\n  candidateBox!: CandidateBox | null;\n  keyboardRowsDOM!: KeyboardElement;\n  defaultName = \"default\";\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\n\n  /**\n   * Creates an instance of SimpleKeyboard\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\n   */\n  constructor(\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\n    keyboardOptions?: KeyboardOptions\n  ) {\n    if (typeof window === \"undefined\") return;\n\n    const {\n      keyboardDOMClass,\n      keyboardDOM,\n      options = {},\n    } = this.handleParams(selectorOrOptions, keyboardOptions);\n\n    /**\n     * Initializing Utilities\n     */\n    this.utilities = new Utilities({\n      getOptions: this.getOptions,\n      getCaretPosition: this.getCaretPosition,\n      getCaretPositionEnd: this.getCaretPositionEnd,\n      dispatch: this.dispatch,\n    });\n\n    /**\n     * Caret position\n     */\n    this.caretPosition = null;\n\n    /**\n     * Caret position end\n     */\n    this.caretPositionEnd = null;\n\n    /**\n     * Processing options\n     */\n    this.keyboardDOM = keyboardDOM;\n\n    /**\n     * @type {object}\n     * @property {object} layout Modify the keyboard layout.\n     * @property {string} layoutName Specifies which layout should be used.\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\n     * @property {boolean} disableButtonHold Disable button hold action.\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\n     * @property {function} onKeyReleased Executes the callback function on key release.\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\n     * @property {object} excludeFromLayout Buttons to exclude from layout\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\n     */\n    this.options = {\n      layoutName: \"default\",\n      theme: \"hg-theme-default\",\n      inputName: \"default\",\n      preventMouseDownDefault: false,\n      enableLayoutCandidates: true,\n      excludeFromLayout: {},\n      ...options,\n    };\n\n    /**\n     * @type {object} Classes identifying loaded plugins\n     */\n    this.keyboardPluginClasses = \"\";\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(SimpleKeyboard, this);\n\n    /**\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\n     * @example\n     * // To get entered input\n     * const input = keyboard.getInput();\n     *\n     * // To clear entered input.\n     * keyboard.clearInput();\n     *\n     * @type {object}\n     * @property {object} default Default SimpleKeyboard internal input.\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\n     */\n    const { inputName = this.defaultName } = this.options;\n    this.input = {};\n    this.input[inputName] = \"\";\n\n    /**\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\n     */\n    this.keyboardDOMClass = keyboardDOMClass;\n\n    /**\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\n     */\n    this.buttonElements = {};\n\n    /**\n     * Simple-keyboard Instances\n     * This enables multiple simple-keyboard support with easier management\n     */\n    if (!window[\"SimpleKeyboardInstances\"])\n      window[\"SimpleKeyboardInstances\"] = {};\n\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\n\n    /**\n     * Instance vars\n     */\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\n    this.isFirstKeyboardInstance =\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\n\n    /**\n     * Physical Keyboard support\n     */\n    this.physicalKeyboard = new PhysicalKeyboard({\n      dispatch: this.dispatch,\n      getOptions: this.getOptions,\n    });\n\n    /**\n     * Initializing CandidateBox\n     */\n    this.candidateBox = this.options.enableLayoutCandidates\n      ? new CandidateBox({\n          utilities: this.utilities,\n        })\n      : null;\n\n    /**\n     * Rendering keyboard\n     */\n    if (this.keyboardDOM) this.render();\n    else {\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\n    }\n\n    /**\n     * Modules\n     */\n    this.modules = {};\n    this.loadModules();\n  }\n\n  /**\n   * parseParams\n   */\n  handleParams = (\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\n    keyboardOptions?: KeyboardOptions\n  ): {\n    keyboardDOMClass: string;\n    keyboardDOM: KeyboardElement;\n    options: Partial<KeyboardOptions | undefined>;\n  } => {\n    let keyboardDOMClass;\n    let keyboardDOM;\n    let options;\n\n    /**\n     * If first parameter is a string:\n     * Consider it as an element's class\n     */\n    if (typeof selectorOrOptions === \"string\") {\n      keyboardDOMClass = selectorOrOptions.split(\".\").join(\"\");\n      keyboardDOM = document.querySelector(\n        `.${keyboardDOMClass}`\n      ) as KeyboardElement;\n      options = keyboardOptions;\n\n      /**\n       * If first parameter is an KeyboardElement\n       * Consider it as the keyboard DOM element\n       */\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\n      /**\n       * This element must have a class, otherwise throw\n       */\n      if (!selectorOrOptions.className) {\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\n      }\n\n      keyboardDOMClass = selectorOrOptions.className.split(\" \")[0];\n      keyboardDOM = selectorOrOptions;\n      options = keyboardOptions;\n\n      /**\n       * Otherwise, search for .simple-keyboard DOM element\n       */\n    } else {\n      keyboardDOMClass = \"simple-keyboard\";\n      keyboardDOM = document.querySelector(\n        `.${keyboardDOMClass}`\n      ) as KeyboardElement;\n      options = selectorOrOptions;\n    }\n\n    return {\n      keyboardDOMClass,\n      keyboardDOM,\n      options,\n    };\n  };\n\n  /**\n   * Getters\n   */\n  getOptions = (): KeyboardOptions => this.options;\n  getCaretPosition = (): number | null => this.caretPosition;\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\n\n  /**\n   * Changes the internal caret position\n   * @param {number} position The caret's start position\n   * @param {number} positionEnd The caret's end position\n   */\n  setCaretPosition(position: number | null, endPosition = position): void {\n    this.caretPosition = position;\n    this.caretPositionEnd = endPosition;\n  }\n\n  /**\n   * Retrieve the candidates for a given input\n   * @param input The input string to check\n   */\n  getInputCandidates(\n    input: string\n  ): { candidateKey: string; candidateValue: string } | Record<string, never> {\n    const {\n      layoutCandidates: layoutCandidatesObj,\n      layoutCandidatesCaseSensitiveMatch,\n    } = this.options;\n\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== \"object\") {\n      return {};\n    }\n\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter(\n      (layoutCandidate: string) => {\n        const inputSubstr =\n          input.substring(0, this.getCaretPositionEnd() || 0) || input;\n        const regexp = new RegExp(\n          `${layoutCandidate}$`,\n          layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\n        );\n        const matches = [...inputSubstr.matchAll(regexp)];\n        return !!matches.length;\n      }\n    );\n\n    if (layoutCandidates.length > 1) {\n      const candidateKey = layoutCandidates.sort(\n        (a, b) => b.length - a.length\n      )[0];\n      return {\n        candidateKey,\n        candidateValue: layoutCandidatesObj[candidateKey],\n      };\n    } else if (layoutCandidates.length) {\n      const candidateKey = layoutCandidates[0];\n      return {\n        candidateKey,\n        candidateValue: layoutCandidatesObj[candidateKey],\n      };\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * Shows a suggestion box with a list of candidate words\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\n   * @param targetElement The element next to which the candidates box will be shown\n   */\n  showCandidatesBox(\n    candidateKey: string,\n    candidateValue: string,\n    targetElement: KeyboardElement\n  ): void {\n    if (this.candidateBox) {\n      this.candidateBox.show({\n        candidateValue,\n        targetElement,\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\n          const { layoutCandidatesCaseSensitiveMatch } = this.options;\n\n          /**\n           * Making sure that our suggestions are not composed characters\n           */\n          const normalizedCandidate = selectedCandidate.normalize(\"NFD\");\n          const currentInput = this.getInput(this.options.inputName, true);\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\n          const inputSubstr =\n            currentInput.substring(0, initialCaretPosition || 0) ||\n            currentInput;\n\n          const regexp = new RegExp(\n            `${candidateKey}$`,\n            layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\n          );\n          const newInputSubstr = inputSubstr.replace(\n            regexp,\n            normalizedCandidate\n          );\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\n\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\n          let newCaretPosition =\n            (initialCaretPosition || currentInput.length) + caretPositionDiff;\n\n          if (newCaretPosition < 0) newCaretPosition = 0;\n\n          this.setInput(newInput, this.options.inputName, true);\n          this.setCaretPosition(newCaretPosition);\n\n          if (typeof this.options.onChange === \"function\")\n            this.options.onChange(\n              this.getInput(this.options.inputName, true),\n              e\n            );\n\n          /**\n           * Calling onChangeAll\n           */\n          if (typeof this.options.onChangeAll === \"function\")\n            this.options.onChangeAll(this.getAllInputs(), e);\n        },\n      });\n    }\n  }\n\n  /**\n   * Handles clicks made to keyboard buttons\n   * @param  {string} button The button's layout name.\n   */\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\n    const { inputName = this.defaultName, debug } = this.options;\n    /**\n     * Ignoring placeholder buttons\n     */\n    if (button === \"{//}\") return;\n\n    /**\n     * Creating inputName if it doesn't exist\n     */\n    if (!this.input[inputName]) this.input[inputName] = \"\";\n\n    /**\n     * Calculating new input\n     */\n    const updatedInput = this.utilities.getUpdatedInput(\n      button,\n      this.input[inputName],\n      this.caretPosition,\n      this.caretPositionEnd\n    );\n\n    /**\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\n     */\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\n      const isEntireInputSelection =\n        this.input[inputName] &&\n        this.input[inputName] === updatedInput &&\n        this.caretPosition === 0 &&\n        this.caretPositionEnd === updatedInput.length;\n\n      if (isEntireInputSelection) {\n        this.setInput(\"\", this.options.inputName, true);\n        this.setCaretPosition(0);\n        this.activeInputElement.value = \"\";\n        this.activeInputElement.setSelectionRange(0, 0);\n        this.handleButtonClicked(button, e);\n        return;\n      }\n    }\n\n    /**\n     * Calling onKeyPress\n     */\n    if (typeof this.options.onKeyPress === \"function\")\n      this.options.onKeyPress(button, e);\n\n    if (\n      // If input will change as a result of this button press\n      this.input[inputName] !== updatedInput &&\n      // This pertains to the \"inputPattern\" option:\n      // If inputPattern isn't set\n      (!this.options.inputPattern ||\n        // Or, if it is set and if the pattern is valid - we proceed.\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\n    ) {\n      /**\n       * If maxLength and handleMaxLength yield true, halting\n       */\n      if (\n        this.options.maxLength &&\n        this.utilities.handleMaxLength(this.input, updatedInput)\n      ) {\n        return;\n      }\n\n      /**\n       * Updating input\n       */\n      const newInputValue = this.utilities.getUpdatedInput(\n        button,\n        this.input[inputName],\n        this.caretPosition,\n        this.caretPositionEnd,\n        true\n      );\n\n      this.setInput(newInputValue, this.options.inputName, true);\n\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\n\n      if (this.options.debug) {\n        console.log(\n          \"Caret at: \",\n          this.getCaretPosition(),\n          this.getCaretPositionEnd(),\n          `(${this.keyboardDOMClass})`\n        );\n      }\n\n      /**\n       * Enforce syncInstanceInputs, if set\n       */\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\n\n      /**\n       * Calling onChange\n       */\n      if (typeof this.options.onChange === \"function\")\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\n\n      /**\n       * Calling onChangeAll\n       */\n      if (typeof this.options.onChangeAll === \"function\")\n        this.options.onChangeAll(this.getAllInputs(), e);\n\n      /**\n       * Check if this new input has candidates (suggested words)\n       */\n      if (e?.target && this.options.enableLayoutCandidates) {\n        const { candidateKey, candidateValue } =\n          this.getInputCandidates(updatedInput);\n\n        if (candidateKey && candidateValue) {\n          this.showCandidatesBox(\n            candidateKey,\n            candidateValue,\n            this.keyboardDOM\n          );\n        } else {\n          this.candidateBox?.destroy();\n        }\n      }\n    }\n\n    if (debug) {\n      console.log(\"Key pressed:\", button);\n    }\n  }\n\n  /**\n   * Get mouse hold state\n   */\n  getMouseHold() {\n    return this.isMouseHold;\n  }\n\n  /**\n   * Mark mouse hold state as set\n   */\n  setMouseHold(value: boolean) {\n    if (this.options.syncInstanceInputs) {\n      this.dispatch((instance: SimpleKeyboard) => {\n        instance.isMouseHold = value;\n      });\n    } else {\n      this.isMouseHold = value;\n    }\n  }\n\n  /**\n   * Handles button mousedown\n   */\n  /* istanbul ignore next */\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\n    if (e) {\n      /**\n       * Handle event options\n       */\n      if (this.options.preventMouseDownDefault) e.preventDefault();\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\n\n      /**\n       * Add active class\n       */\n      e.target.classList.add(this.activeButtonClass);\n    }\n\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\n\n    /**\n     * @type {boolean} Whether the mouse is being held onKeyPress\n     */\n    this.setMouseHold(true);\n\n    /**\n     * @type {object} Time to wait until a key hold is detected\n     */\n    if (!this.options.disableButtonHold) {\n      this.holdTimeout = window.setTimeout(() => {\n        if (\n          (this.getMouseHold() &&\n            // TODO: This needs to be configurable through options\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\n              button === \"{delete}\" ||\n              button === \"{backspace}\" ||\n              button === \"{bksp}\" ||\n              button === \"{space}\" ||\n              button === \"{tab}\")) ||\n          button === \"{arrowright}\" ||\n          button === \"{arrowleft}\" ||\n          button === \"{arrowup}\" ||\n          button === \"{arrowdown}\"\n        ) {\n          if (this.options.debug) console.log(\"Button held:\", button);\n\n          this.handleButtonHold(button);\n        }\n        clearTimeout(this.holdTimeout);\n      }, 500);\n    }\n  }\n\n  /**\n   * Handles button mouseup\n   */\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\n    if (e) {\n      /**\n       * Handle event options\n       */\n      if (this.options.preventMouseUpDefault && e.preventDefault)\n        e.preventDefault();\n      if (this.options.stopMouseUpPropagation && e.stopPropagation)\n        e.stopPropagation();\n\n      /* istanbul ignore next */\n      const isKeyboard =\n        e.target === this.keyboardDOM ||\n        (e.target && this.keyboardDOM.contains(e.target)) ||\n        (this.candidateBox &&\n          this.candidateBox.candidateBoxElement &&\n          (e.target === this.candidateBox.candidateBoxElement ||\n            (e.target &&\n              this.candidateBox.candidateBoxElement.contains(e.target))));\n\n      /**\n       * On click outside, remove candidateBox\n       */\n      if (!isKeyboard && this.candidateBox) {\n        this.candidateBox.destroy();\n      }\n    }\n\n    /**\n     * Remove active class\n     */\n    this.recurseButtons((buttonElement: Element) => {\n      buttonElement.classList.remove(this.activeButtonClass);\n    });\n\n    this.setMouseHold(false);\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * Calling onKeyReleased\n     */\n    if (button && typeof this.options.onKeyReleased === \"function\")\n      this.options.onKeyReleased(button);\n  }\n\n  /**\n   * Handles container mousedown\n   */\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\n    /**\n     * Handle event options\n     */\n    if (this.options.preventMouseDownDefault) e.preventDefault();\n  }\n\n  /**\n   * Handles button hold\n   */\n  /* istanbul ignore next */\n  handleButtonHold(button: string): void {\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * @type {object} Timeout dictating the speed of key hold iterations\n     */\n    this.holdInteractionTimeout = window.setTimeout(() => {\n      if (this.getMouseHold()) {\n        this.handleButtonClicked(button);\n        this.handleButtonHold(button);\n      } else {\n        clearTimeout(this.holdInteractionTimeout);\n      }\n    }, 100);\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances (if you have several instances).\n   */\n  syncInstanceInputs(): void {\n    this.dispatch((instance: SimpleKeyboard) => {\n      instance.replaceInput(this.input);\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\n    });\n  }\n\n  /**\n   * Clear the keyboard’s input.\n   * @param {string} [inputName] optional - the internal input to select\n   */\n  clearInput(\n    inputName: string = this.options.inputName || this.defaultName\n  ): void {\n    this.input[inputName] = \"\";\n\n    /**\n     * Reset caretPosition\n     */\n    this.setCaretPosition(0);\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\n  }\n\n  /**\n   * Get the keyboard’s input (You can also get it from the onChange prop).\n   * @param  {string} [inputName] optional - the internal input to select\n   */\n  getInput(\n    inputName: string = this.options.inputName || this.defaultName,\n    skipSync = false\n  ): string {\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\n\n    if (this.options.rtl) {\n      // Remove existing control chars\n      const inputWithoutRTLControl = this.input[inputName]\n        .replace(\"\\u202B\", \"\")\n        .replace(\"\\u202C\", \"\");\n\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\n    } else {\n      return this.input[inputName];\n    }\n  }\n\n  /**\n   * Get all simple-keyboard inputs\n   */\n  getAllInputs(): KeyboardInput {\n    const output = {};\n    const inputNames = Object.keys(this.input);\n\n    inputNames.forEach((inputName) => {\n      output[inputName] = this.getInput(inputName, true);\n    });\n\n    return output;\n  }\n\n  /**\n   * Set the keyboard’s input.\n   * @param  {string} input the input value\n   * @param  {string} inputName optional - the internal input to select\n   */\n  setInput(\n    input: string,\n    inputName: string = this.options.inputName || this.defaultName,\n    skipSync?: boolean\n  ): void {\n    this.input[inputName] = input;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\n  }\n\n  /**\n   * Replace the input object (`keyboard.input`)\n   * @param  {object} inputObj The input object\n   */\n  replaceInput(inputObj: KeyboardInput): void {\n    this.input = inputObj;\n  }\n\n  /**\n   * Set new option or modify existing ones after initialization.\n   * @param  {object} options The options to set\n   */\n  setOptions(options = {}): void {\n    const changedOptions = this.changedOptions(options);\n    this.options = Object.assign(this.options, options);\n\n    if (changedOptions.length) {\n      if (this.options.debug) {\n        console.log(\"changedOptions\", changedOptions);\n      }\n\n      /**\n       * Some option changes require adjustments before re-render\n       */\n      this.onSetOptions(changedOptions);\n\n      /**\n       * Rendering\n       */\n      this.render();\n    }\n  }\n\n  /**\n   * Detecting changes to non-function options\n   * This allows us to ascertain whether a button re-render is needed\n   */\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\n    return Object.keys(newOptions).filter(\n      (optionName) =>\n        JSON.stringify(newOptions[optionName]) !==\n        JSON.stringify(this.options[optionName])\n    );\n  }\n\n  /**\n   * Executing actions depending on changed options\n   * @param  {object} options The options to set\n   */\n  onSetOptions(changedOptions: string[] = []): void {\n    /**\n     * Changed: layoutName\n     */\n    if (changedOptions.includes(\"layoutName\")) {\n      /**\n       * Reset candidateBox\n       */\n      if (this.candidateBox) {\n        this.candidateBox.destroy();\n      }\n    }\n\n    /**\n     * Changed: layoutCandidatesPageSize, layoutCandidates\n     */\n    if (\n      changedOptions.includes(\"layoutCandidatesPageSize\") ||\n      changedOptions.includes(\"layoutCandidates\")\n    ) {\n      /**\n       * Reset and recreate candidateBox\n       */\n      if (this.candidateBox) {\n        this.candidateBox.destroy();\n        this.candidateBox = new CandidateBox({\n          utilities: this.utilities,\n        });\n      }\n    }\n  }\n\n  /**\n   * Remove all keyboard rows and reset keyboard values.\n   * Used internally between re-renders.\n   */\n  resetRows(): void {\n    if (this.keyboardRowsDOM) {\n      this.keyboardRowsDOM.remove();\n    }\n\n    this.keyboardDOM.className = this.keyboardDOMClass;\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\n    this.buttonElements = {};\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\n   */\n  // eslint-disable-next-line no-unused-vars\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\n    if (!window[\"SimpleKeyboardInstances\"]) {\n      console.warn(\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\n      );\n      throw new Error(\"INSTANCES_VAR_ERROR\");\n    }\n\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach((key) => {\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\n    });\n  }\n\n  /**\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  addButtonTheme(buttons: string, className: string): void {\n    if (!className || !buttons) return;\n\n    buttons.split(\" \").forEach((button) => {\n      className.split(\" \").forEach((classNameItem) => {\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\n\n        let classNameFound = false;\n\n        /**\n         * If class is already defined, we add button to class definition\n         */\n        this.options.buttonTheme.map((buttonTheme) => {\n          if (buttonTheme?.class.split(\" \").includes(classNameItem)) {\n            classNameFound = true;\n\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\n            if (!buttonThemeArray.includes(button)) {\n              classNameFound = true;\n              buttonThemeArray.push(button);\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\n            }\n          }\n          return buttonTheme;\n        });\n\n        /**\n         * If class is not defined, we create a new entry\n         */\n        if (!classNameFound) {\n          this.options.buttonTheme.push({\n            class: classNameItem,\n            buttons: buttons,\n          });\n        }\n      });\n    });\n\n    this.render();\n  }\n\n  /**\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  removeButtonTheme(buttons: string, className: string): void {\n    /**\n     * When called with empty parameters, remove all button themes\n     */\n    if (!buttons && !className) {\n      this.options.buttonTheme = [];\n      this.render();\n      return;\n    }\n\n    /**\n     * If buttons are passed and buttonTheme has items\n     */\n    if (\n      buttons &&\n      Array.isArray(this.options.buttonTheme) &&\n      this.options.buttonTheme.length\n    ) {\n      const buttonArray = buttons.split(\" \");\n      buttonArray.forEach((button) => {\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\n          /**\n           * If className is set, we affect the buttons only for that class\n           * Otherwise, we afect all classes\n           */\n          if (\n            (buttonTheme &&\n              className &&\n              className.includes(buttonTheme.class)) ||\n            !className\n          ) {\n            const filteredButtonArray = buttonTheme?.buttons\n              .split(\" \")\n              .filter((item) => item !== button);\n\n            /**\n             * If buttons left, return them, otherwise, remove button Theme\n             */\n            if (buttonTheme && filteredButtonArray?.length) {\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\n            } else {\n              this.options.buttonTheme?.splice(index, 1);\n              buttonTheme = null;\n            }\n          }\n\n          return buttonTheme;\n        });\n      });\n\n      this.render();\n    }\n  }\n\n  /**\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\n   * @param  {string} button The button layout name to select\n   */\n  getButtonElement(\n    button: string\n  ): KeyboardElement | KeyboardElement[] | undefined {\n    let output;\n\n    const buttonArr = this.buttonElements[button];\n    if (buttonArr) {\n      if (buttonArr.length > 1) {\n        output = buttonArr;\n      } else {\n        output = buttonArr[0];\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * This handles the \"inputPattern\" option\n   * by checking if the provided inputPattern passes\n   */\n  inputPatternIsValid(inputVal: string): boolean {\n    const inputPatternRaw = this.options.inputPattern;\n    let inputPattern;\n\n    /**\n     * Check if input pattern is global or targeted to individual inputs\n     */\n    if (inputPatternRaw instanceof RegExp) {\n      inputPattern = inputPatternRaw;\n    } else {\n      inputPattern =\n        inputPatternRaw[this.options.inputName || this.defaultName];\n    }\n\n    if (inputPattern && inputVal) {\n      const didInputMatch = inputPattern.test(inputVal);\n\n      if (this.options.debug) {\n        console.log(\n          `inputPattern (\"${inputPattern}\"): ${\n            didInputMatch ? \"passed\" : \"did not pass!\"\n          }`\n        );\n      }\n\n      return didInputMatch;\n    } else {\n      /**\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\n       */\n      return true;\n    }\n  }\n\n  /**\n   * Handles simple-keyboard event listeners\n   */\n  setEventListeners(): void {\n    /**\n     * Only first instance should set the event listeners\n     */\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\n      if (this.options.debug) {\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\n      }\n\n      /**\n       * Event Listeners\n       */\n      document.addEventListener(\"keyup\", this.handleKeyUp);\n      document.addEventListener(\"keydown\", this.handleKeyDown);\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\n      document.addEventListener(\"select\", this.handleSelect);\n      document.addEventListener(\"selectionchange\", this.handleSelectionChange);\n    }\n  }\n\n  /**\n   * Event Handler: KeyUp\n   */\n  handleKeyUp(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n\n    if (this.options.physicalKeyboardHighlight) {\n      this.physicalKeyboard.handleHighlightKeyUp(event);\n    }\n  }\n\n  /**\n   * Event Handler: KeyDown\n   */\n  handleKeyDown(event: KeyboardHandlerEvent): void {\n    if (this.options.physicalKeyboardHighlight) {\n      this.physicalKeyboard.handleHighlightKeyDown(event);\n    }\n  }\n\n  /**\n   * Event Handler: MouseUp\n   */\n  handleMouseUp(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: TouchEnd\n   */\n  /* istanbul ignore next */\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: Select\n   */\n  /* istanbul ignore next */\n  handleSelect(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: SelectionChange\n   */\n  /* istanbul ignore next */\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\n   */\n  caretEventHandler(event: KeyboardHandlerEvent): void {\n    let targetTagName: string;\n    if (event.target.tagName) {\n      targetTagName = event.target.tagName.toLowerCase();\n    }\n\n    this.dispatch((instance) => {\n      let isKeyboard =\n        event.target === instance.keyboardDOM ||\n        (event.target && instance.keyboardDOM.contains(event.target));\n\n      /**\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\n       * not just the current one\n       */\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\n        isKeyboard = event.path.some((item: HTMLElement) =>\n          item?.hasAttribute?.(\"data-skInstance\")\n        );\n      }\n\n      if (\n        (targetTagName === \"textarea\" ||\n          (targetTagName === \"input\" &&\n            [\"text\", \"search\", \"url\", \"tel\", \"password\"].includes(\n              event.target.type\n            ))) &&\n        !instance.options.disableCaretPositioning\n      ) {\n        /**\n         * Tracks current cursor position\n         * As keys are pressed, text will be added/removed at that position within the input.\n         */\n        instance.setCaretPosition(\n          event.target.selectionStart,\n          event.target.selectionEnd\n        );\n\n        /**\n         * Tracking current input in order to handle caret positioning edge cases\n         */\n        this.activeInputElement = event.target;\n\n        if (instance.options.debug) {\n          console.log(\n            \"Caret at: \",\n            instance.getCaretPosition(),\n            instance.getCaretPositionEnd(),\n            event && event.target.tagName.toLowerCase(),\n            `(${instance.keyboardDOMClass})`\n          );\n        }\n      } else if (\n        (instance.options.disableCaretPositioning || !isKeyboard) &&\n        event?.type !== \"selectionchange\"\n      ) {\n        /**\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\n         */\n        instance.setCaretPosition(null);\n\n        /**\n         * Resetting activeInputElement\n         */\n        this.activeInputElement = null;\n\n        if (instance.options.debug) {\n          console.log(\n            `Caret position reset due to \"${event?.type}\" event`,\n            event\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Execute an operation on each button\n   */\n  recurseButtons(fn: any): void {\n    if (!fn) return;\n\n    Object.keys(this.buttonElements).forEach((buttonName) =>\n      this.buttonElements[buttonName].forEach(fn)\n    );\n  }\n\n  /**\n   * Destroy keyboard listeners and DOM elements\n   */\n  destroy(): void {\n    if (this.options.debug)\n      console.log(\n        `Destroying simple-keyboard instance: ${this.currentInstanceName}`\n      );\n\n    /**\n     * Remove document listeners\n     */\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\n    document.removeEventListener(\"select\", this.handleSelect);\n    document.removeEventListener(\"selectionchange\", this.handleSelectionChange);\n    document.onpointerup = null;\n    document.ontouchend = null;\n    document.ontouchcancel = null;\n    document.onmouseup = null;\n\n    /**\n     * Remove buttons\n     */\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\n      if (buttonElement) {\n        buttonElement.onpointerdown = null;\n        buttonElement.onpointerup = null;\n        buttonElement.onpointercancel = null;\n        buttonElement.ontouchstart = null;\n        buttonElement.ontouchend = null;\n        buttonElement.ontouchcancel = null;\n        buttonElement.onclick = null;\n        buttonElement.onmousedown = null;\n        buttonElement.onmouseup = null;\n\n        buttonElement.remove();\n        buttonElement = null;\n      }\n    };\n\n    this.recurseButtons(deleteButton);\n\n    /**\n     * Remove wrapper events\n     */\n    this.keyboardDOM.onpointerdown = null;\n    this.keyboardDOM.ontouchstart = null;\n    this.keyboardDOM.onmousedown = null;\n\n    /**\n     * Clearing keyboard rows\n     */\n    this.resetRows();\n\n    /**\n     * Candidate box\n     */\n    if (this.candidateBox) {\n      this.candidateBox.destroy();\n      this.candidateBox = null;\n    }\n\n    /**\n     * Clearing activeInputElement\n     */\n    this.activeInputElement = null;\n\n    /**\n     * Removing instance attribute\n     */\n    this.keyboardDOM.removeAttribute(\"data-skInstance\");\n\n    /**\n     * Clearing keyboardDOM\n     */\n    this.keyboardDOM.innerHTML = \"\";\n\n    /**\n     * Remove instance\n     */\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\n    delete window[\"SimpleKeyboardInstances\"][this.currentInstanceName];\n\n    /**\n     * Reset initialized flag\n     */\n    this.initialized = false;\n  }\n\n  /**\n   * Process buttonTheme option\n   */\n  getButtonThemeClasses(button: string): string[] {\n    const buttonTheme = this.options.buttonTheme;\n    let buttonClasses: string[] = [];\n\n    if (Array.isArray(buttonTheme)) {\n      buttonTheme.forEach((themeObj) => {\n        if (\n          themeObj &&\n          themeObj.class &&\n          typeof themeObj.class === \"string\" &&\n          themeObj.buttons &&\n          typeof themeObj.buttons === \"string\"\n        ) {\n          const themeObjClasses = themeObj.class.split(\" \");\n          const themeObjButtons = themeObj.buttons.split(\" \");\n\n          if (themeObjButtons.includes(button)) {\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\n          }\n        } else {\n          console.warn(\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\n            themeObj\n          );\n        }\n      });\n    }\n\n    return buttonClasses;\n  }\n\n  /**\n   * Process buttonAttributes option\n   */\n  setDOMButtonAttributes(button: string, callback: any): void {\n    const buttonAttributes = this.options.buttonAttributes;\n\n    if (Array.isArray(buttonAttributes)) {\n      buttonAttributes.forEach((attrObj) => {\n        if (\n          attrObj.attribute &&\n          typeof attrObj.attribute === \"string\" &&\n          attrObj.value &&\n          typeof attrObj.value === \"string\" &&\n          attrObj.buttons &&\n          typeof attrObj.buttons === \"string\"\n        ) {\n          const attrObjButtons = attrObj.buttons.split(\" \");\n\n          if (attrObjButtons.includes(button)) {\n            callback(attrObj.attribute, attrObj.value);\n          }\n        } else {\n          console.warn(\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\n            attrObj\n          );\n        }\n      });\n    }\n  }\n\n  onTouchDeviceDetected() {\n    /**\n     * Processing autoTouchEvents\n     */\n    this.processAutoTouchEvents();\n\n    /**\n     * Disabling contextual window on touch devices\n     */\n    this.disableContextualWindow();\n  }\n\n  /**\n   * Disabling contextual window for hg-button\n   */\n  /* istanbul ignore next */\n  disableContextualWindow() {\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\n      if (event.target.classList.contains(\"hg-button\")) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      }\n    };\n  }\n\n  /**\n   * Process autoTouchEvents option\n   */\n  processAutoTouchEvents() {\n    if (this.options.autoUseTouchEvents) {\n      this.options.useTouchEvents = true;\n\n      if (this.options.debug) {\n        console.log(\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n   */\n  onInit() {\n    if (this.options.debug) {\n      console.log(`${this.keyboardDOMClass} Initialized`);\n    }\n\n    /**\n     * setEventListeners\n     */\n    this.setEventListeners();\n\n    if (typeof this.options.onInit === \"function\") this.options.onInit(this);\n  }\n\n  /**\n   * Executes the callback function before a simple-keyboard render.\n   */\n  beforeFirstRender() {\n    /**\n     * Performing actions when touch device detected\n     */\n    if (this.utilities.isTouchDevice()) {\n      this.onTouchDeviceDetected();\n    }\n\n    if (typeof this.options.beforeFirstRender === \"function\")\n      this.options.beforeFirstRender(this);\n\n    /**\n     * Notify about PointerEvents usage\n     */\n    if (\n      this.isFirstKeyboardInstance &&\n      this.utilities.pointerEventsSupported() &&\n      !this.options.useTouchEvents &&\n      !this.options.useMouseEvents\n    ) {\n      if (this.options.debug) {\n        console.log(\"Using PointerEvents as it is supported by this browser\");\n      }\n    }\n\n    /**\n     * Notify about touch events usage\n     */\n    if (this.options.useTouchEvents) {\n      if (this.options.debug) {\n        console.log(\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * Executes the callback function before a simple-keyboard render.\n   */\n  beforeRender() {\n    if (typeof this.options.beforeRender === \"function\")\n      this.options.beforeRender(this);\n  }\n\n  /**\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n   */\n  onRender() {\n    if (typeof this.options.onRender === \"function\")\n      this.options.onRender(this);\n  }\n\n  /**\n   * Executes the callback function once all modules have been loaded\n   */\n  onModulesLoaded() {\n    if (typeof this.options.onModulesLoaded === \"function\")\n      this.options.onModulesLoaded(this);\n  }\n\n  /**\n   * Register module\n   */\n  registerModule = (name: string, initCallback: any) => {\n    if (!this.modules[name]) this.modules[name] = {};\n\n    initCallback(this.modules[name]);\n  };\n\n  /**\n   * Load modules\n   */\n  loadModules() {\n    if (Array.isArray(this.options.modules)) {\n      this.options.modules.forEach((KeyboardModule) => {\n        const keyboardModule = new KeyboardModule(this);\n        keyboardModule.init && keyboardModule.init(this);\n      });\n\n      this.keyboardPluginClasses = \"modules-loaded\";\n\n      this.render();\n      this.onModulesLoaded();\n    }\n  }\n\n  /**\n   * Get module prop\n   */\n  getModuleProp(name: string, prop: string) {\n    if (!this.modules[name]) return false;\n\n    return this.modules[name][prop];\n  }\n\n  /**\n   * getModulesList\n   */\n  getModulesList() {\n    return Object.keys(this.modules);\n  }\n\n  /**\n   * Parse Row DOM containers\n   */\n  parseRowDOMContainers(\n    rowDOM: HTMLDivElement,\n    rowIndex: number,\n    containerStartIndexes: number[],\n    containerEndIndexes: number[]\n  ) {\n    const rowDOMArray = Array.from(rowDOM.children);\n    let removedElements = 0;\n\n    if (rowDOMArray.length) {\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\n        const endIndex = containerEndIndexes[arrIndex];\n\n        /**\n         * If there exists a respective end index\n         * if end index comes after start index\n         */\n        if (!endIndex || !(endIndex > startIndex)) {\n          return false;\n        }\n\n        /**\n         * Updated startIndex, endIndex\n         * This is since the removal of buttons to place a single button container\n         * results in a modified array size\n         */\n        const updated_startIndex = startIndex - removedElements;\n        const updated_endIndex = endIndex - removedElements;\n\n        /**\n         * Create button container\n         */\n        const containerDOM = document.createElement(\"div\");\n        containerDOM.className += \"hg-button-container\";\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\n\n        /**\n         * Taking elements due to be inserted into container\n         */\n        const containedElements = rowDOMArray.splice(\n          updated_startIndex,\n          updated_endIndex - updated_startIndex + 1\n        );\n        removedElements = updated_endIndex - updated_startIndex;\n\n        /**\n         * Inserting elements to container\n         */\n        containedElements.forEach((element) =>\n          containerDOM.appendChild(element)\n        );\n\n        /**\n         * Adding container at correct position within rowDOMArray\n         */\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\n\n        /**\n         * Clearing old rowDOM children structure\n         */\n        rowDOM.innerHTML = \"\";\n\n        /**\n         * Appending rowDOM new children list\n         */\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\n\n        if (this.options.debug) {\n          console.log(\n            \"rowDOMContainer\",\n            containedElements,\n            updated_startIndex,\n            updated_endIndex,\n            removedElements + 1\n          );\n        }\n      });\n    }\n\n    return rowDOM;\n  }\n\n  /**\n   * getKeyboardClassString\n   */\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter(\n      (DOMClass) => !!DOMClass\n    );\n\n    return keyboardClasses.join(\" \");\n  };\n\n  /**\n   * Renders rows and buttons as per options\n   */\n  render() {\n    /**\n     * Clear keyboard\n     */\n    this.resetRows();\n\n    /**\n     * Calling beforeFirstRender\n     */\n    if (!this.initialized) {\n      this.beforeFirstRender();\n    }\n\n    /**\n     * Calling beforeRender\n     */\n    this.beforeRender();\n\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\n    const layout = this.options.layout || getDefaultLayout();\n    const useTouchEvents = this.options.useTouchEvents || false;\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\n    const useMouseEvents = this.options.useMouseEvents || false;\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\n\n    /**\n     * Adding themeClass, layoutClass to keyboardDOM\n     */\n    this.keyboardDOM.className = this.getKeyboardClassString(\n      this.options.theme,\n      layoutClass,\n      this.keyboardPluginClasses,\n      useTouchEventsClass\n    );\n\n    /**\n     * Adding keyboard identifier\n     */\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\n\n    /**\n     * Create row wrapper\n     */\n    this.keyboardRowsDOM = document.createElement(\"div\");\n    this.keyboardRowsDOM.className = \"hg-rows\";\n\n    /**\n     * Iterating through each row\n     */\n    layout[this.options.layoutName || this.defaultName].forEach(\n      (row, rIndex) => {\n        let rowArray = row.split(\" \");\n\n        /**\n         * Enforce excludeFromLayout\n         */\n        if (\n          this.options.excludeFromLayout &&\n          this.options.excludeFromLayout[\n            this.options.layoutName || this.defaultName\n          ]\n        ) {\n          rowArray = rowArray.filter(\n            (buttonName) =>\n              this.options.excludeFromLayout &&\n              !this.options.excludeFromLayout[\n                this.options.layoutName || this.defaultName\n              ].includes(buttonName)\n          );\n        }\n\n        /**\n         * Creating empty row\n         */\n        let rowDOM = document.createElement(\"div\");\n        rowDOM.className += \"hg-row\";\n\n        /**\n         * Tracking container indicators in rows\n         */\n        const containerStartIndexes: number[] = [];\n        const containerEndIndexes: number[] = [];\n\n        /**\n         * Iterating through each button in row\n         */\n        rowArray.forEach((button, bIndex) => {\n          /**\n           * Check if button has a container indicator\n           */\n          const buttonHasContainerStart =\n            !disableRowButtonContainers &&\n            typeof button === \"string\" &&\n            button.length > 1 &&\n            button.indexOf(\"[\") === 0;\n\n          const buttonHasContainerEnd =\n            !disableRowButtonContainers &&\n            typeof button === \"string\" &&\n            button.length > 1 &&\n            button.indexOf(\"]\") === button.length - 1;\n\n          /**\n           * Save container start index, if applicable\n           */\n          if (buttonHasContainerStart) {\n            containerStartIndexes.push(bIndex);\n\n            /**\n             * Removing indicator\n             */\n            button = button.replace(/\\[/g, \"\");\n          }\n\n          if (buttonHasContainerEnd) {\n            containerEndIndexes.push(bIndex);\n\n            /**\n             * Removing indicator\n             */\n            button = button.replace(/\\]/g, \"\");\n          }\n\n          /**\n           * Processing button options\n           */\n          const fctBtnClass = this.utilities.getButtonClass(button);\n          const buttonDisplayName = this.utilities.getButtonDisplayName(\n            button,\n            this.options.display,\n            this.options.mergeDisplay\n          );\n\n          /**\n           * Creating button\n           */\n          const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\n          const buttonDOM = document.createElement(buttonType);\n          buttonDOM.className += `hg-button ${fctBtnClass}`;\n\n          /**\n           * Adding buttonTheme\n           */\n          buttonDOM.classList.add(...this.getButtonThemeClasses(button));\n\n          /**\n           * Adding buttonAttributes\n           */\n          this.setDOMButtonAttributes(\n            button,\n            (attribute: string, value: string) => {\n              buttonDOM.setAttribute(attribute, value);\n            }\n          );\n\n          this.activeButtonClass = \"hg-activeButton\";\n\n          /**\n           * Handle button click event\n           */\n          /* istanbul ignore next */\n          if (\n            this.utilities.pointerEventsSupported() &&\n            !useTouchEvents &&\n            !useMouseEvents\n          ) {\n            /**\n             * Handle PointerEvents\n             */\n            buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\n              this.handleButtonClicked(button, e);\n              this.handleButtonMouseDown(button, e);\n            };\n            buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\n              this.handleButtonMouseUp(button, e);\n            };\n            buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\n              this.handleButtonMouseUp(button, e);\n            };\n          } else {\n            /**\n             * Fallback for browsers not supporting PointerEvents\n             */\n            if (useTouchEvents) {\n              /**\n               * Handle touch events\n               */\n              buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\n                this.handleButtonClicked(button, e);\n                this.handleButtonMouseDown(button, e);\n              };\n              buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n              buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n            } else {\n              /**\n               * Handle mouse events\n               */\n              buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\n                this.setMouseHold(false);\n                /**\n                 * Fire button handler in onclick for compatibility reasons\n                 * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\n                 * in onmousedown instead\n                 */\n                if (typeof this.options.onKeyReleased !== \"function\") {\n                  this.handleButtonClicked(button, e);\n                }\n              };\n              buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\n                /**\n                 * Fire button handler for onKeyReleased use-case\n                 */\n                if (\n                  typeof this.options.onKeyReleased === \"function\" &&\n                  !this.isMouseHold\n                ) {\n                  this.handleButtonClicked(button, e);\n                }\n                this.handleButtonMouseDown(button, e);\n              };\n              buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n            }\n          }\n\n          /**\n           * Adding identifier\n           */\n          buttonDOM.setAttribute(\"data-skBtn\", button);\n\n          /**\n           * Adding unique id\n           * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\n           */\n          const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\n          buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\n\n          /**\n           * Adding button label to button\n           */\n          const buttonSpanDOM = document.createElement(\"span\");\n          buttonSpanDOM.innerHTML = buttonDisplayName;\n          buttonDOM.appendChild(buttonSpanDOM);\n\n          /**\n           * Adding to buttonElements\n           */\n          if (!this.buttonElements[button]) this.buttonElements[button] = [];\n\n          this.buttonElements[button].push(buttonDOM);\n\n          /**\n           * Appending button to row\n           */\n          rowDOM.appendChild(buttonDOM);\n        });\n\n        /**\n         * Parse containers in row\n         */\n        rowDOM = this.parseRowDOMContainers(\n          rowDOM,\n          rIndex,\n          containerStartIndexes,\n          containerEndIndexes\n        );\n\n        /**\n         * Appending row to hg-rows\n         */\n        this.keyboardRowsDOM.appendChild(rowDOM);\n      }\n    );\n\n    /**\n     * Appending row to keyboard\n     */\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\n\n    /**\n     * Calling onRender\n     */\n    this.onRender();\n\n    if (!this.initialized) {\n      /**\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\n       */\n      this.initialized = true;\n\n      /**\n       * Handling parent events\n       */\n      /* istanbul ignore next */\n      if (\n        this.utilities.pointerEventsSupported() &&\n        !useTouchEvents &&\n        !useMouseEvents\n      ) {\n        document.onpointerup = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      } else if (useTouchEvents) {\n        /**\n         * Handling ontouchend, ontouchcancel\n         */\n        document.ontouchend = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        document.ontouchcancel = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      } else if (!useTouchEvents) {\n        /**\n         * Handling mouseup\n         */\n        document.onmouseup = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      }\n\n      /**\n       * Calling onInit\n       */\n      this.onInit();\n    }\n  }\n}\n\nexport default SimpleKeyboard;\n","export const getDefaultLayout = () => {\n  return {\n    default: [\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\n      \"{lock} a s d f g h j k l ; ' {enter}\",\n      \"{shift} z x c v b n m , . / {shift}\",\n      \".com @ {space}\",\n    ],\n    shift: [\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\n      \"{tab} Q W E R T Y U I O P { } |\",\n      '{lock} A S D F G H J K L : \" {enter}',\n      \"{shift} Z X C V B N M < > ? {shift}\",\n      \".com @ {space}\",\n    ],\n  };\n};\n","import SimpleKeyboard from \"./components/Keyboard\";\nexport default SimpleKeyboard;\n"],"sourceRoot":""}